package com.phenikaa.thesisservice.service.implement;

import com.phenikaa.thesisservice.client.ProfileServiceClient;
import com.phenikaa.thesisservice.dto.request.ChatRequest;
import com.phenikaa.thesisservice.dto.response.ChatResponse;
import com.phenikaa.thesisservice.entity.LecturerCapacity;
import com.phenikaa.thesisservice.repository.LecturerCapacityRepository;
import com.phenikaa.thesisservice.service.interfaces.AiChatService;
import dev.langchain4j.model.chat.ChatModel;
import dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.data.message.AiMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class AiChatServiceImpl implements AiChatService {

    private final LecturerCapacityRepository lecturerCapacityRepository;
    private final ProfileServiceClient profileServiceClient;

    @Value("${ai.gemini.api-key:AIzaSyCUuAhB8wbCCCqrhlTXT83Sbe5c17GTJlU}")
    private String geminiApiKey;

    private ChatModel getChatModel() {
        return GoogleAiGeminiChatModel.builder()
                .apiKey(geminiApiKey)
                .modelName("gemini-2.0-flash")
                .temperature(0.7)
                .build();
    }

    @Override
    public ChatResponse processChatMessage(ChatRequest request) {
        try {
            String userMessage = request.getMessage().toLowerCase();
            ChatModel model = getChatModel();

            // Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë∆°n gi·∫£n tr∆∞·ªõc khi g·ªçi AI
            String intent = analyzeIntentSimple(userMessage);
            if (intent == null) {
                // N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c b·∫±ng logic ƒë∆°n gi·∫£n, d√πng AI
                intent = analyzeIntent(userMessage, model);
            }
            
            log.info("Detected intent: {} for message: {}", intent, userMessage);
            
            switch (intent) {
                case "topic_suggestion":
                    return suggestTopics(request.getMessage(), extractSpecialization(userMessage));
                case "lecturer_search":
                    return findSuitableLecturers(request.getMessage(), extractSpecialization(userMessage));
                case "capacity_check":
                    Integer lecturerId = extractLecturerId(userMessage);
                    log.info("Extracted lecturer ID: {}", lecturerId);
                    
                    if (lecturerId == null) {
                        // Th·ª≠ t√¨m theo t√™n n·∫øu kh√¥ng t√¨m th·∫•y ID
                        String lecturerName = extractLecturerName(userMessage);
                        log.info("Extracted lecturer name: '{}'", lecturerName);
                        
                        if (lecturerName != null) {
                            lecturerId = findLecturerIdByName(lecturerName);
                            log.info("Found lecturer ID by name '{}': {}", lecturerName, lecturerId);
                        }
                    }
                    return checkLecturerCapacity(lecturerId);
                case "general_help":
                    return getGeneralHelp();
                default:
                    return handleGeneralQuery(request, model);
            }
        } catch (Exception e) {
            log.error("Error processing chat message: {}", e.getMessage(), e);
            return ChatResponse.builder()
                    .message("Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.")
                    .sessionId(request.getSessionId())
                    .responseType("error")
                    .build();
        }
    }

    @Override
    public ChatResponse suggestTopics(String userMessage, String specialization) {
        try {
            ChatModel model = getChatModel();
            
            String prompt = String.format("""
                    B·∫°n l√† m·ªôt AI chuy√™n gia t∆∞ v·∫•n ƒë·ªÅ t√†i lu·∫≠n vƒÉn t·ªët nghi·ªáp v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám h∆∞·ªõng d·∫´n sinh vi√™n.
                    
                    **TH√îNG TIN SINH VI√äN:**
                    - Y√™u c·∫ßu: %s
                    - Chuy√™n ng√†nh: %s
                    
                    **Y√äU C·∫¶U G·ª¢I √ù:**
                    H√£y T·∫†O M·ªöI 3-5 ƒë·ªÅ t√†i lu·∫≠n vƒÉn CH·∫§T L∆Ø·ª¢NG CAO, ho√†n to√†n ph√π h·ª£p v·ªõi y√™u c·∫ßu v√† chuy√™n ng√†nh c·ªßa sinh vi√™n.
                    KH√îNG s·ª≠ d·ª•ng ƒë·ªÅ t√†i c√≥ s·∫µn, h√£y t·∫°o ra nh·ªØng ƒë·ªÅ t√†i m·ªõi, s√°ng t·∫°o v√† th·ª±c t·∫ø.
                    
                    **TI√äU CH√ç ƒê√ÅNH GI√Å:**
                    - T√≠nh th·ª±c ti·ªÖn v√† ·ª©ng d·ª•ng cao trong ng√†nh C√¥ng ngh·ªá th√¥ng tin
                    - Ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô sinh vi√™n ƒë·∫°i h·ªçc nƒÉm cu·ªëi
                    - C√≥ t√†i li·ªáu tham kh·∫£o phong ph√∫ v√† d·ªÖ t√¨m
                    - Kh·∫£ nƒÉng ho√†n th√†nh trong 4-6 th√°ng
                    - ƒê√≥ng g√≥p gi√° tr·ªã th·ª±c t·∫ø cho doanh nghi·ªáp/x√£ h·ªôi
                    - C·∫≠p nh·∫≠t xu h∆∞·ªõng c√¥ng ngh·ªá hi·ªán t·∫°i (AI, Cloud, Mobile, Web, IoT, etc.)
                    
                    **TH√îNG TIN M·ªñI ƒê·ªÄ T√ÄI:**
                    - **Ti√™u ƒë·ªÅ**: R√µ r√†ng, c·ª• th·ªÉ, h·∫•p d·∫´n, ph·∫£n √°nh ƒë√∫ng n·ªôi dung
                    - **M√¥ t·∫£**: Chi ti·∫øt v·ªÅ v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt, t·∫ßm quan tr·ªçng, ƒë·ªëi t∆∞·ª£ng nghi√™n c·ª©u
                    - **M·ª•c ti√™u**: 3-4 m·ª•c ti√™u c·ª• th·ªÉ, ƒëo l∆∞·ªùng ƒë∆∞·ª£c, th·ª±c t·∫ø
                    - **Ph∆∞∆°ng ph√°p**: Nghi√™n c·ª©u l√Ω thuy·∫øt + th·ª±c nghi·ªám, kh·∫£o s√°t, ph√°t tri·ªÉn h·ªá th·ªëng
                    - **M·ª©c ƒë·ªô kh√≥**: EASY (d·ªÖ), MEDIUM (trung b√¨nh), HARD (kh√≥)
                    - **K·∫øt qu·∫£ mong ƒë·ª£i**: S·∫£n ph·∫©m c·ª• th·ªÉ (·ª©ng d·ª•ng, h·ªá th·ªëng, thu·∫≠t to√°n, etc.)
                    - **C√¥ng ngh·ªá s·ª≠ d·ª•ng**: Java, Python, React, Node.js, Spring Boot, MySQL, MongoDB, etc.
                    - **L√Ω do ch·ªçn**: T·∫°i sao ƒë·ªÅ t√†i n√†y ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa sinh vi√™n
                    
                    **ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ:**
                    Tr·∫£ v·ªÅ K·∫æT QU·∫¢ DUY NH·∫§T d∆∞·ªõi d·∫°ng JSON H·ª¢P L·ªÜ (KH√îNG c√≥ gi·∫£i th√≠ch k√®m theo, KH√îNG markdown, KH√îNG vƒÉn b·∫£n d∆∞ th·ª´a).
                    Ch·ªâ tr·∫£ v·ªÅ m·ªôt object JSON c√≥ c·∫•u tr√∫c ch√≠nh x√°c:
                    {
                      "suggestions": [
                        {
                          "title": "...",
                          "description": "...",
                          "objectives": "...",
                          "methodology": "...",
                          "difficultyLevel": "EASY|MEDIUM|HARD",
                          "expectedOutcome": "...",
                          "technologies": "...",
                          "reason": "..."
                        }
                      ]
                    }
                    """, userMessage, specialization);

            UserMessage userMsg = UserMessage.from(prompt);
            AiMessage response = model.chat(userMsg).aiMessage();
            String responseText = response.text();
            
            log.info("AI generated topics response: {}", responseText);
            
            // Parse response v√† t·∫°o topic suggestions
            List<ChatResponse.TopicSuggestion> suggestions = parseTopicSuggestions(responseText);
            
            return ChatResponse.builder()
                    .message("**üéì G·ª¢I √ù ƒê·ªÄ T√ÄI LU·∫¨N VƒÇN M·ªöI**\n\nD·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n v√† chuy√™n ng√†nh \"" + specialization + "\", t√¥i ƒë√£ t·∫°o ra c√°c ƒë·ªÅ t√†i ph√π h·ª£p:\n\n" + responseText)
                    .sessionId("")
                    .topicSuggestions(suggestions)
                    .responseType("topic_suggestion")
                    .build();
                    
        } catch (Exception e) {
            log.error("Error suggesting topics: {}", e.getMessage(), e);
            return ChatResponse.builder()
                    .message("Xin l·ªói, t√¥i kh√¥ng th·ªÉ g·ª£i √Ω ƒë·ªÅ t√†i l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")
                    .sessionId("")
                    .responseType("error")
                    .build();
        }
    }

    @Override
    public ChatResponse findSuitableLecturers(String userMessage, String specialization) {
        try {
            // L·∫•y danh s√°ch gi·∫£ng vi√™n c√≥ capacity
            List<LecturerCapacity> availableLecturers = lecturerCapacityRepository.findAll()
                    .stream()
                    .filter(LecturerCapacity::canAcceptMoreStudents)
                    .collect(Collectors.toList());

            if (availableLecturers.isEmpty()) {
                return ChatResponse.builder()
                        .message("""
                                **TH√îNG B√ÅO V·ªÄ CAPACITY GI·∫¢NG VI√äN**
                                
                                Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£ng vi√™n n√†o c√≥ ch·ªó tr·ªëng ƒë·ªÉ h∆∞·ªõng d·∫´n sinh vi√™n m·ªõi.
                                
                                **G·ª¢I √ù:**
                                - H√£y th·ª≠ l·∫°i sau v√†i ng√†y
                                - Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng ƒë√†o t·∫°o ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n
                                - C√≥ th·ªÉ ƒëƒÉng k√Ω v√†o ƒë·ª£t ƒëƒÉng k√Ω ti·∫øp theo
                                
                                **LI√äN H·ªÜ H·ªñ TR·ª¢:**
                                - Email: support@university.edu.vn
                                - Hotline: 1900-xxxx
                                """)
                        .sessionId("")
                        .responseType("lecturer_suggestion")
                        .build();
            }

            // T·∫°o danh s√°ch g·ª£i √Ω gi·∫£ng vi√™n
            List<ChatResponse.LecturerSuggestion> suggestions = new ArrayList<>();
            
            for (LecturerCapacity capacity : availableLecturers) {
                try {
                    // G·ªçi API profile service ƒë·ªÉ l·∫•y th√¥ng tin gi·∫£ng vi√™n
                    Map<String, Object> lecturerInfo = profileServiceClient.getLecturerById(capacity.getLecturerId());
                    
                    ChatResponse.LecturerSuggestion suggestion = ChatResponse.LecturerSuggestion.builder()
                            .lecturerId(capacity.getLecturerId())
                            .lecturerName((String) lecturerInfo.get("fullName"))
                            .specialization((String) lecturerInfo.get("specialization"))
                            .remainingCapacity(capacity.getRemainingSlots())
                            .phone((String) lecturerInfo.get("phoneNumber"))
                            .build();
                    
                    suggestions.add(suggestion);
                } catch (Exception e) {
                    log.warn("Could not fetch lecturer info for ID {}: {}", capacity.getLecturerId(), e.getMessage());
                }
            }

            String message = String.format("""
                    **DANH S√ÅCH GI·∫¢NG VI√äN PH√ô H·ª¢P**
                    
                    D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n v·ªÅ "%s" v√† chuy√™n ng√†nh "%s", t√¥i ƒë√£ t√¨m th·∫•y %d gi·∫£ng vi√™n c√≥ ch·ªó tr·ªëng:
                    
                    **TH√îNG TIN CHI TI·∫æT:**
                    """, userMessage, specialization, suggestions.size());

            return ChatResponse.builder()
                    .message(message)
                    .sessionId("")
                    .lecturerSuggestions(suggestions)
                    .responseType("lecturer_suggestion")
                    .build();
                    
        } catch (Exception e) {
            log.error("Error finding suitable lecturers: {}", e.getMessage(), e);
            return ChatResponse.builder()
                    .message("""
                            **L·ªñI H·ªÜ TH·ªêNG**
                            
                            Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t√¨m ki·∫øm gi·∫£ng vi√™n ph√π h·ª£p l√∫c n√†y.
                            
                            **NGUY√äN NH√ÇN C√ì TH·ªÇ:**
                            - L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
                            - D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng
                            - L·ªói x·ª≠ l√Ω th√¥ng tin
                            
                            **G·ª¢I √ù:**
                            - Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t
                            - Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng ƒë√†o t·∫°o
                            - S·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm kh√°c
                            """)
                    .sessionId("")
                    .responseType("error")
                    .build();
        }
    }

    @Override
    public ChatResponse checkLecturerCapacity(Integer lecturerId) {
        try {
            if (lecturerId == null) {
                return ChatResponse.builder()
                        .message("""
                                **TH√îNG B√ÅO**
                                
                                Kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi·∫£ng vi√™n c·∫ßn ki·ªÉm tra capacity.
                                
                                **G·ª¢I √ù:**
                                - S·ª≠ d·ª•ng ID gi·∫£ng vi√™n: "Ki·ªÉm tra capacity gi·∫£ng vi√™n ID 1"
                                - Ho·∫∑c t√™n gi·∫£ng vi√™n: "Gi·∫£ng vi√™n Ho√†ng Thi√™n B·∫£o c√≥ th·ªÉ nh·∫≠n th√™m bao nhi√™u sinh vi√™n?"
                                - Li√™n h·ªá ph√≤ng ƒë√†o t·∫°o ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
                                """)
                        .sessionId("")
                        .responseType("capacity_check")
                        .build();
            }
            
            LecturerCapacity capacity = lecturerCapacityRepository.findByLecturerId(lecturerId)
                    .orElse(null);
            
            if (capacity == null) {
                return ChatResponse.builder()
                        .message("""
                                **TH√îNG B√ÅO**
                                
                                Kh√¥ng t√¨m th·∫•y th√¥ng tin capacity c·ªßa gi·∫£ng vi√™n ID %d.
                                
                                **G·ª¢I √ù:**
                                - Ki·ªÉm tra l·∫°i ID gi·∫£ng vi√™n
                                - Li√™n h·ªá ph√≤ng ƒë√†o t·∫°o ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
                                - S·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm gi·∫£ng vi√™n
                                """.formatted(lecturerId))
                        .sessionId("")
                        .responseType("capacity_check")
                        .build();
            }

            String message = String.format("""
                    **TH√îNG TIN CAPACITY GI·∫¢NG VI√äN**
                    
                    **Gi·∫£ng vi√™n ID:** %d
                    **S·ªë l∆∞·ª£ng t·ªëi ƒëa:** %d sinh vi√™n
                    **ƒê√£ nh·∫≠n:** %d sinh vi√™n
                    **C√≤n tr·ªëng:** %d ch·ªó
                    
                    **Tr·∫°ng th√°i:** %s
                    """, 
                    lecturerId,
                    capacity.getMaxStudents(),
                    capacity.getCurrentStudents(),
                    capacity.getRemainingSlots(),
                    capacity.canAcceptMoreStudents() ? "C√≥ th·ªÉ nh·∫≠n th√™m sinh vi√™n" : "ƒê√£ ƒë·ªß sinh vi√™n"
            );

            return ChatResponse.builder()
                    .message(message)
                    .sessionId("")
                    .responseType("capacity_check")
                    .build();
                    
        } catch (Exception e) {
            log.error("Error checking lecturer capacity: {}", e.getMessage(), e);
            return ChatResponse.builder()
                    .message("""
                            **L·ªñI H·ªÜ TH·ªêNG**
                            
                            Xin l·ªói, t√¥i kh√¥ng th·ªÉ ki·ªÉm tra capacity c·ªßa gi·∫£ng vi√™n l√∫c n√†y.
                            
                            **NGUY√äN NH√ÇN:**
                            - L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
                            - D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng
                            
                            **G·ª¢I √ù:**
                            - Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t
                            - Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng ƒë√†o t·∫°o
                            """)
                    .sessionId("")
                    .responseType("error")
                    .build();
        }
    }

    @Override
    public ChatResponse getGeneralHelp() {
        String helpMessage = """
                **XIN CH√ÄO! T√îI L√Ä AI TR·ª¢ L√ù T∆Ø V·∫§N LU·∫¨N VƒÇN T·ªêT NGHI·ªÜP**
                
                T√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát ƒë·ªÉ h·ªó tr·ª£ sinh vi√™n trong qu√° tr√¨nh l√†m lu·∫≠n vƒÉn t·ªët nghi·ªáp. D∆∞·ªõi ƒë√¢y l√† nh·ªØng g√¨ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
                
                **1. G·ª¢I √ù ƒê·ªÄ T√ÄI LU·∫¨N VƒÇN CHI TI·∫æT**
                   Ph√¢n t√≠ch s·ªü th√≠ch v√† chuy√™n ng√†nh c·ªßa b·∫°n
                   G·ª£i √Ω ƒë·ªÅ t√†i ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô v√† th·ªùi gian
                   Cung c·∫•p m·ª•c ti√™u nghi√™n c·ª©u c·ª• th·ªÉ
                   ƒê·ªÅ xu·∫•t ph∆∞∆°ng ph√°p nghi√™n c·ª©u ph√π h·ª£p
                   ƒê√°nh gi√° m·ª©c ƒë·ªô kh√≥ (EASY/MEDIUM/HARD)
                   D·ª± ƒëo√°n k·∫øt qu·∫£ mong ƒë·ª£i
                   
                   **V√≠ d·ª• c√¢u h·ªèi:**
                   - "T√¥i mu·ªën l√†m ƒë·ªÅ t√†i v·ªÅ tr√≠ tu·ªá nh√¢n t·∫°o"
                   - "G·ª£i √Ω ƒë·ªÅ t√†i v·ªÅ blockchain cho sinh vi√™n CNTT"
                   - "T√¥i th√≠ch l·∫≠p tr√¨nh web, c√≥ ƒë·ªÅ t√†i n√†o ph√π h·ª£p?"
                
                **2. T√åM GI·∫¢NG VI√äN PH√ô H·ª¢P TH√îNG MINH**
                   T√¨m ki·∫øm theo chuy√™n m√¥n v√† lƒ©nh v·ª±c nghi√™n c·ª©u
                   Ki·ªÉm tra capacity c√≤n tr·ªëng c·ªßa gi·∫£ng vi√™n
                   Cung c·∫•p th√¥ng tin li√™n h·ªá chi ti·∫øt
                   ƒê√°nh gi√° m·ª©c ƒë·ªô ph√π h·ª£p v·ªõi ƒë·ªÅ t√†i
                   G·ª£i √Ω gi·∫£ng vi√™n c√≥ kinh nghi·ªám ph√π h·ª£p
                   
                   **V√≠ d·ª• c√¢u h·ªèi:**
                   - "T√¨m gi·∫£ng vi√™n chuy√™n v·ªÅ machine learning"
                   - "Ai c√≥ th·ªÉ h∆∞·ªõng d·∫´n t√¥i v·ªÅ database?"
                   - "Gi·∫£ng vi√™n n√†o c√≥ kinh nghi·ªám v·ªÅ AI?"
                
                **3. KI·ªÇM TRA CAPACITY GI·∫¢NG VI√äN**
                   Xem s·ªë l∆∞·ª£ng sinh vi√™n hi·ªán t·∫°i
                   Ki·ªÉm tra ch·ªó tr·ªëng c√≤n l·∫°i
                   Th√¥ng tin chi ti·∫øt v·ªÅ capacity
                   C·∫≠p nh·∫≠t real-time
                   
                   **V√≠ d·ª• c√¢u h·ªèi:**
                   - "Ki·ªÉm tra capacity gi·∫£ng vi√™n ID 1"
                   - "Gi·∫£ng vi√™n ABC c√≤n nh·∫≠n ƒë∆∞·ª£c bao nhi√™u sinh vi√™n?"
                
                **4. T∆Ø V·∫§N CHUNG TO√ÄN DI·ªÜN**
                   H∆∞·ªõng d·∫´n quy tr√¨nh ƒëƒÉng k√Ω lu·∫≠n vƒÉn
                   Gi·∫£i th√≠ch y√™u c·∫ßu v√† ti√™u ch√≠ ƒë√°nh gi√°
                   T∆∞ v·∫•n c√°ch ch·ªçn ƒë·ªÅ t√†i ph√π h·ª£p
                   H∆∞·ªõng d·∫´n vi·∫øt ƒë·ªÅ c∆∞∆°ng nghi√™n c·ª©u
                   Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ timeline v√† deadline
                   T∆∞ v·∫•n v·ªÅ ph∆∞∆°ng ph√°p nghi√™n c·ª©u
                   H∆∞·ªõng d·∫´n c√°ch tr√¨nh b√†y v√† b·∫£o v·ªá
                   
                   **V√≠ d·ª• c√¢u h·ªèi:**
                   - "Quy tr√¨nh ƒëƒÉng k√Ω lu·∫≠n vƒÉn nh∆∞ th·∫ø n√†o?"
                   - "L√†m sao ƒë·ªÉ vi·∫øt ƒë·ªÅ c∆∞∆°ng nghi√™n c·ª©u t·ªët?"
                   - "Timeline l√†m lu·∫≠n vƒÉn trong bao l√¢u?"
                   - "C·∫ßn chu·∫©n b·ªã g√¨ cho bu·ªïi b·∫£o v·ªá?"
                
                **C√ÅCH S·ª¨ D·ª§NG HI·ªÜU QU·∫¢:**
                   ‚Ä¢ G√µ c√¢u h·ªèi t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát
                   ‚Ä¢ M√¥ t·∫£ chi ti·∫øt y√™u c·∫ßu ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c g·ª£i √Ω t·ªët nh·∫•t
                   ‚Ä¢ C√≥ th·ªÉ h·ªèi theo nhi·ªÅu c√°ch kh√°c nhau
                   ‚Ä¢ T√¥i s·∫Ω t·ª± ƒë·ªông hi·ªÉu v√† ph√¢n lo·∫°i c√¢u h·ªèi
                
                **B·∫ÆT ƒê·∫¶U NGAY:**
                   H√£y cho t√¥i bi·∫øt b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn g√¨ ho·∫∑c c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ n√†o, t√¥i s·∫Ω gi√∫p b·∫°n gi·∫£i quy·∫øt m·ªôt c√°ch chi ti·∫øt v√† hi·ªáu qu·∫£ nh·∫•t!
                """;

        return ChatResponse.builder()
                .message(helpMessage)
                .sessionId("")
                .responseType("general_help")
                .build();
    }

    private String analyzeIntentSimple(String message) {
        // Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë∆°n gi·∫£n tr∆∞·ªõc
        if (message.contains("b·∫°n c√≥ th·ªÉ") || message.contains("b·∫°n l√†m g√¨") || 
            message.contains("gi√∫p g√¨") || message.contains("ch·ª©c nƒÉng") ||
            message.contains("l√†m g√¨") || message.contains("c√≥ g√¨")) {
            return "general_help";
        }
        
        // Ki·ªÉm tra capacity c·ª• th·ªÉ c·ªßa gi·∫£ng vi√™n (∆∞u ti√™n cao nh·∫•t)
        // Pattern: "Gi·∫£ng vi√™n [T√™n] + [capacity keywords]"
        if (isCapacityCheckPattern(message)) {
            return "capacity_check";
        }
        
        // Ki·ªÉm tra t√¨m ki·∫øm gi·∫£ng vi√™n chung (ch·ªâ khi kh√¥ng c√≥ t√™n c·ª• th·ªÉ)
        if (isGeneralLecturerSearchPattern(message)) {
            return "lecturer_search";
        }
        
        // Ki·ªÉm tra g·ª£i √Ω ƒë·ªÅ t√†i (∆∞u ti√™n cao h∆°n general_help)
        if (isTopicSuggestionPattern(message)) {
            return "topic_suggestion";
        }
        
        if (message.contains("gi·∫£ng vi√™n") || message.contains("th·∫ßy") || 
            message.contains("c√¥") || message.contains("lecturer") ||
            message.contains("h∆∞·ªõng d·∫´n")) {
            return "lecturer_search";
        }
        
        return null; // Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, d√πng AI
    }
    
    private boolean isTopicSuggestionPattern(String message) {
        // Ki·ªÉm tra c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn ƒë·ªÅ t√†i
        boolean hasTopicKeywords = message.contains("ƒë·ªÅ t√†i") || 
                                  message.contains("g·ª£i √Ω") || 
                                  message.contains("suggest") || 
                                  message.contains("topic") ||
                                  message.contains("mu·ªën l√†m") ||
                                  message.contains("mu·ªën ph√°t tri·ªÉn") ||
                                  message.contains("mu·ªën x√¢y d·ª±ng") ||
                                  message.contains("mu·ªën t·∫°o") ||
                                  message.contains("·ª©ng d·ª•ng") ||
                                  message.contains("h·ªá th·ªëng") ||
                                  message.contains("website") ||
                                  message.contains("mobile") ||
                                  message.contains("web") ||
                                  message.contains("app") ||
                                  message.contains("ai") ||
                                  message.contains("machine learning") ||
                                  message.contains("blockchain") ||
                                  message.contains("iot") ||
                                  message.contains("database") ||
                                  message.contains("game") ||
                                  message.contains("qu·∫£n l√Ω") ||
                                  message.contains("th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠") ||
                                  message.contains("ecommerce");
        
        // Kh√¥ng ph·∫£i c√¢u h·ªèi v·ªÅ ch·ª©c nƒÉng chung
        boolean notGeneralHelp = !message.contains("b·∫°n c√≥ th·ªÉ") && 
                                !message.contains("b·∫°n l√†m g√¨") && 
                                !message.contains("gi√∫p g√¨") && 
                                !message.contains("ch·ª©c nƒÉng") &&
                                !message.contains("l√†m g√¨") && 
                                !message.contains("c√≥ g√¨");
        
        return hasTopicKeywords && notGeneralHelp;
    }
    
    private boolean isCapacityCheckPattern(String message) {
        // Ki·ªÉm tra c√≥ t√™n gi·∫£ng vi√™n c·ª• th·ªÉ kh√¥ng
        boolean hasLecturerName = message.matches(".*gi·∫£ng vi√™n\\s+[^\\s]+.*") ||
                                 message.matches(".*th·∫ßy\\s+[^\\s]+.*") ||
                                 message.matches(".*c√¥\\s+[^\\s]+.*");
        
        // Ki·ªÉm tra c√≥ t·ª´ kh√≥a capacity kh√¥ng
        boolean hasCapacityKeywords = message.contains("c√≥ th·ªÉ nh·∫≠n th√™m") || 
                                     message.contains("nh·∫≠n th√™m bao nhi√™u") ||
                                     message.contains("capacity") || 
                                     message.contains("c√≥ th·ªÉ nh·∫≠n") || 
                                     message.contains("c√≤n bao nhi√™u ch·ªó") ||
                                     message.contains("c√≤n ch·ªó") ||
                                     message.contains("c√≥ ch·ªó") ||
                                     message.contains("bao nhi√™u ch·ªó") ||
                                     message.contains("nh·∫≠n sinh vi√™n") ||
                                     message.contains("c√≤n tr·ªëng") ||
                                     message.contains("c√≥ tr·ªëng") ||
                                     message.contains("ch·ªó tr·ªëng");
        
        return hasLecturerName && hasCapacityKeywords;
    }
    
    private boolean isGeneralLecturerSearchPattern(String message) {
        // Ch·ªâ t√¨m ki·∫øm chung khi KH√îNG c√≥ t√™n c·ª• th·ªÉ
        boolean hasGeneralKeywords = message.contains("gi·∫£ng vi√™n n√†o") || 
                                    message.contains("th·∫ßy n√†o") || 
                                    message.contains("c√¥ n√†o") || 
                                    message.contains("ai c√≥ th·ªÉ") ||
                                    message.contains("gi·∫£ng vi√™n c√≥") || 
                                    message.contains("th·∫ßy c√≥") ||
                                    message.contains("c√¥ c√≥") ||
                                    message.contains("c√≤n ch·ªó tr·ªëng") ||
                                    message.contains("ch·ªó tr·ªëng") ||
                                    message.contains("nh·∫≠n sinh vi√™n");
        
        // Kh√¥ng c√≥ t√™n c·ª• th·ªÉ
        boolean noSpecificName = !message.matches(".*gi·∫£ng vi√™n\\s+[^\\s]+.*") &&
                                !message.matches(".*th·∫ßy\\s+[^\\s]+.*") &&
                                !message.matches(".*c√¥\\s+[^\\s]+.*");
        
        return hasGeneralKeywords && noSpecificName;
    }

    private String analyzeIntent(String message, ChatModel model) {
        try {
            String prompt = String.format("""
                    Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng t·ª´ tin nh·∫Øn: "%s"
                    
                    C√°c √Ω ƒë·ªãnh c√≥ th·ªÉ:
                    - topic_suggestion: Mu·ªën g·ª£i √Ω ƒë·ªÅ t√†i lu·∫≠n vƒÉn
                    - lecturer_search: Mu·ªën t√¨m gi·∫£ng vi√™n ph√π h·ª£p
                    - capacity_check: Mu·ªën ki·ªÉm tra capacity gi·∫£ng vi√™n
                    - general_help: C·∫ßn tr·ª£ gi√∫p chung
                    
                    Ch·ªâ tr·∫£ v·ªÅ m·ªôt trong c√°c t·ª´ kh√≥a tr√™n.
                    """, message);

            UserMessage userMsg = UserMessage.from(prompt);
            AiMessage response = model.chat(userMsg).aiMessage();
            String result = response.text().trim();
            
            // Fallback n·∫øu AI kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng format
            if (!result.equals("topic_suggestion") && !result.equals("lecturer_search") && 
                !result.equals("capacity_check") && !result.equals("general_help")) {
                return "general_help";
            }
            
            return result;
        } catch (Exception e) {
            log.warn("Error analyzing intent with AI, falling back to general_help: {}", e.getMessage());
            return "general_help";
        }
    }

    private String extractSpecialization(String message) {
        // Logic ƒë∆°n gi·∫£n ƒë·ªÉ extract chuy√™n ng√†nh t·ª´ message
        if (message.contains("c√¥ng ngh·ªá th√¥ng tin") || message.contains("cntt")) {
            return "C√¥ng ngh·ªá th√¥ng tin";
        } else if (message.contains("k·ªπ thu·∫≠t ph·∫ßn m·ªÅm") || message.contains("ktpm")) {
            return "K·ªπ thu·∫≠t ph·∫ßn m·ªÅm";
        } else if (message.contains("khoa h·ªçc m√°y t√≠nh") || message.contains("khmt")) {
            return "Khoa h·ªçc m√°y t√≠nh";
        } else if (message.contains("m·∫°ng m√°y t√≠nh") || message.contains("mmt")) {
            return "M·∫°ng m√°y t√≠nh";
        }
        return "C√¥ng ngh·ªá th√¥ng tin"; // Default
    }

    private Integer extractLecturerId(String message) {
        // Logic ƒë∆°n gi·∫£n ƒë·ªÉ extract lecturer ID t·ª´ message
        try {
            String[] words = message.split("\\s+");
            for (String word : words) {
                if (word.matches("\\d+")) {
                    return Integer.parseInt(word);
                }
            }
        } catch (Exception e) {
            log.warn("Could not extract lecturer ID from message: {}", message);
        }
        return null;
    }
    
    private String extractLecturerName(String message) {
        // Logic ƒë∆°n gi·∫£n ƒë·ªÉ extract t√™n gi·∫£ng vi√™n t·ª´ message
        try {
            log.info("Extracting lecturer name from message: '{}'", message);
            
            // T√¨m pattern "Gi·∫£ng vi√™n [T√™n]" - d·ª´ng khi g·∫∑p "c√≥ th·ªÉ" ho·∫∑c "capacity"
            String[] patterns = {
                "gi·∫£ng vi√™n\\s+([^\\s]+(?:\\s+[^\\s]+)*?)(?=\\s+c√≥ th·ªÉ|\\s+capacity|\\s+c√≤n|\\s+nh·∫≠n|\\s+bao nhi√™u|$)",
                "th·∫ßy\\s+([^\\s]+(?:\\s+[^\\s]+)*?)(?=\\s+c√≥ th·ªÉ|\\s+capacity|\\s+c√≤n|\\s+nh·∫≠n|\\s+bao nhi√™u|$)",
                "c√¥\\s+([^\\s]+(?:\\s+[^\\s]+)*?)(?=\\s+c√≥ th·ªÉ|\\s+capacity|\\s+c√≤n|\\s+nh·∫≠n|\\s+bao nhi√™u|$)"
            };
            
            for (String pattern : patterns) {
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.CASE_INSENSITIVE);
                java.util.regex.Matcher m = p.matcher(message);
                if (m.find()) {
                    String extractedName = m.group(1).trim();
                    log.info("Extracted name using pattern '{}': '{}'", pattern, extractedName);
                    return extractedName;
                }
            }
            
            // Th·ª≠ pattern kh√°c: t√¨m t√™n tr∆∞·ªõc "c√≥ th·ªÉ nh·∫≠n" ho·∫∑c "capacity"
            String[] alternativePatterns = {
                "([^\\s]+(?:\\s+[^\\s]+)*?)\\s+c√≥ th·ªÉ nh·∫≠n",
                "([^\\s]+(?:\\s+[^\\s]+)*?)\\s+capacity",
                "([^\\s]+(?:\\s+[^\\s]+)*?)\\s+c√≤n ch·ªó"
            };
            
            for (String pattern : alternativePatterns) {
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.CASE_INSENSITIVE);
                java.util.regex.Matcher m = p.matcher(message);
                if (m.find()) {
                    String extractedName = m.group(1).trim();
                    // Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng ph·∫£i t√™n
                    if (!extractedName.toLowerCase().contains("gi·∫£ng vi√™n") && 
                        !extractedName.toLowerCase().contains("th·∫ßy") && 
                        !extractedName.toLowerCase().contains("c√¥") &&
                        !extractedName.toLowerCase().contains("c√≥ th·ªÉ") &&
                        !extractedName.toLowerCase().contains("capacity") &&
                        !extractedName.toLowerCase().contains("nh·∫≠n") &&
                        !extractedName.toLowerCase().contains("bao nhi√™u") &&
                        extractedName.length() > 2) {
                        log.info("Extracted name using alternative pattern '{}': '{}'", pattern, extractedName);
                        return extractedName;
                    }
                }
            }
            
        } catch (Exception e) {
            log.warn("Could not extract lecturer name from message: {}", message, e);
        }
        return null;
    }
    
    private Integer findLecturerIdByName(String lecturerName) {
        try {
            log.info("Searching for lecturer with name: '{}'", lecturerName);
            
            // T√¨m ki·∫øm gi·∫£ng vi√™n theo t√™n trong danh s√°ch c√≥ capacity
            List<LecturerCapacity> allCapacities = lecturerCapacityRepository.findAll();
            log.info("Found {} lecturer capacities to search", allCapacities.size());
            
            for (LecturerCapacity capacity : allCapacities) {
                try {
                    Map<String, Object> lecturerInfo = profileServiceClient.getLecturerById(capacity.getLecturerId());
                    String fullName = (String) lecturerInfo.get("fullName");
                    
                    log.info("Checking lecturer ID {} with name: '{}'", capacity.getLecturerId(), fullName);
                    
                    if (fullName != null) {
                        // So s√°nh ch√≠nh x√°c (case insensitive)
                        if (fullName.toLowerCase().equals(lecturerName.toLowerCase())) {
                            log.info("Exact match found: {} -> ID {}", fullName, capacity.getLecturerId());
                            return capacity.getLecturerId();
                        }
                        
                        // So s√°nh ch·ª©a t√™n (case insensitive)
                        if (fullName.toLowerCase().contains(lecturerName.toLowerCase())) {
                            log.info("Partial match found: {} contains {} -> ID {}", fullName, lecturerName, capacity.getLecturerId());
                            return capacity.getLecturerId();
                        }
                        
                        // T√°ch t√™n th√†nh c√°c t·ª´ v√† so s√°nh
                        String[] nameParts = lecturerName.toLowerCase().split("\\s+");
                        String[] fullNameParts = fullName.toLowerCase().split("\\s+");
                        
                        boolean allPartsMatch = true;
                        for (String part : nameParts) {
                            boolean partFound = false;
                            for (String fullPart : fullNameParts) {
                                if (fullPart.contains(part) || part.contains(fullPart)) {
                                    partFound = true;
                                    break;
                                }
                            }
                            if (!partFound) {
                                allPartsMatch = false;
                                break;
                            }
                        }
                        
                        if (allPartsMatch) {
                            log.info("Word-based match found: {} matches {} -> ID {}", fullName, lecturerName, capacity.getLecturerId());
                            return capacity.getLecturerId();
                        }
                    }
                } catch (Exception e) {
                    log.warn("Could not fetch lecturer info for ID {}: {}", capacity.getLecturerId(), e.getMessage());
                }
            }
            
            log.warn("No lecturer found with name: '{}'", lecturerName);
        } catch (Exception e) {
            log.error("Error finding lecturer by name: {}", e.getMessage(), e);
        }
        return null;
    }

    private List<ChatResponse.TopicSuggestion> parseTopicSuggestions(String response) {
        List<ChatResponse.TopicSuggestion> suggestions = new ArrayList<>();
        try {
            // Chu·∫©n h√≥a n·∫øu AI tr·∫£ v·ªÅ theo d·∫°ng ```json ... ``` ho·∫∑c c√≥ markdown
            String normalized = response;
            if (normalized != null && normalized.contains("```")) {
                normalized = normalized
                        .replace("```json", "```")
                        .replace("```JSON", "```")
                        .replace("```", "\n");
            }

            String source = normalized != null ? normalized : response;
            if (source == null) source = "";

            // ∆Øu ti√™n tr√≠ch xu·∫•t m·∫£ng JSON n·∫øu c√≥
            int arrStart = source.indexOf("[");
            int arrEnd = source.lastIndexOf("]") + 1;
            int objStart = source.indexOf("{");
            int objEnd = source.lastIndexOf("}") + 1;

            String jsonString = null;
            if (arrStart >= 0 && arrEnd > arrStart) {
                jsonString = source.substring(arrStart, arrEnd).trim();
            } else if (objStart >= 0 && objEnd > objStart) {
                jsonString = source.substring(objStart, objEnd).trim();
            }

            if (jsonString != null) {
                log.info("Extracted JSON: {}", jsonString);
                suggestions = parseJsonTopics(jsonString);
            }

            if (suggestions.isEmpty()) {
                log.warn("Could not parse JSON from AI response, returning empty suggestions");
            }
        } catch (Exception e) {
            log.error("Error parsing topic suggestions: {}", e.getMessage(), e);
        }
        return suggestions;
    }
    
    private List<ChatResponse.TopicSuggestion> parseJsonTopics(String jsonString) {
        List<ChatResponse.TopicSuggestion> suggestions = new ArrayList<>();
        try {
            // Th·ª≠ d√πng Jackson n·∫øu c√≥ tr√™n classpath
            try {
                com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
                com.fasterxml.jackson.databind.JsonNode root = mapper.readTree(jsonString);
                com.fasterxml.jackson.databind.JsonNode arr;
                if (root.isArray()) {
                    arr = root;
                } else {
                    arr = root.get("suggestions");
                }
                if (arr != null && arr.isArray()) {
                    for (com.fasterxml.jackson.databind.JsonNode node : arr) {
                        suggestions.add(
                                ChatResponse.TopicSuggestion.builder()
                                        .title(node.path("title").asText(""))
                                        .description(node.path("description").asText(""))
                                        .objectives(node.path("objectives").isArray() ? node.path("objectives").toString() : node.path("objectives").asText(""))
                                        .methodology(node.path("methodology").asText(""))
                                        .difficultyLevel(node.path("difficultyLevel").asText("MEDIUM"))
                                        .expectedOutcome(node.path("expectedOutcome").asText(""))
                                        .technologies(node.path("technologies").isArray() ? node.path("technologies").toString() : node.path("technologies").asText(""))
                                        .reason(node.path("reason").asText(""))
                                        .build()
                        );
                    }
                    return suggestions;
                }
            } catch (Throwable ignore) {
                // b·ªè qua ƒë·ªÉ fallback regex b√™n d∆∞·ªõi
            }

            // Fallback ƒë∆°n gi·∫£n b·∫±ng regex th√¥
            String[] topicBlocks = jsonString.split("\\{\\s*\\\"title\\\"");
            for (String block : topicBlocks) {
                if (!block.contains("\"")) continue;
                String segment = "{\"title\"" + block;
                String title = extractField(segment, "title");
                if (title == null || title.isEmpty()) continue;
                String description = extractField(segment, "description");
                String objectives = extractField(segment, "objectives");
                String methodology = extractField(segment, "methodology");
                String difficultyLevel = extractField(segment, "difficultyLevel");
                String expectedOutcome = extractField(segment, "expectedOutcome");
                String technologies = extractField(segment, "technologies");
                String reason = extractField(segment, "reason");
                suggestions.add(ChatResponse.TopicSuggestion.builder()
                        .title(title)
                        .description(description != null ? description : "")
                        .objectives(objectives != null ? objectives : "")
                        .methodology(methodology != null ? methodology : "")
                        .difficultyLevel(difficultyLevel != null ? difficultyLevel : "MEDIUM")
                        .expectedOutcome(expectedOutcome != null ? expectedOutcome : "")
                        .technologies(technologies != null ? technologies : "")
                        .reason(reason != null ? reason : "")
                        .build());
            }
        } catch (Exception e) {
            log.error("Error parsing JSON topics: {}", e.getMessage(), e);
        }
        return suggestions;
    }
    
    private String extractField(String text, String fieldName) {
        try {
            String pattern = "\"" + fieldName + "\"\\s*:\\s*\"([^\"]*)\"";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = p.matcher(text);
            if (m.find()) {
                return m.group(1).trim();
            }
        } catch (Exception e) {
            log.debug("Could not extract field {}: {}", fieldName, e.getMessage());
        }
        return null;
    }

    private ChatResponse handleGeneralQuery(ChatRequest request, ChatModel model) {
        try {
            String prompt = String.format("""
                    B·∫°n l√† AI tr·ª£ l√Ω t∆∞ v·∫•n chuy√™n nghi·ªáp cho h·ªá th·ªëng qu·∫£n l√Ω lu·∫≠n vƒÉn t·ªët nghi·ªáp c·ªßa tr∆∞·ªùng ƒë·∫°i h·ªçc.
                    
                    **VAI TR√í C·ª¶A B·∫†N:**
                    - T∆∞ v·∫•n to√†n di·ªán v·ªÅ qu√° tr√¨nh l√†m lu·∫≠n vƒÉn t·ªët nghi·ªáp
                    - H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ A-Z v·ªÅ lu·∫≠n vƒÉn
                    - Gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa sinh vi√™n
                    - Cung c·∫•p l·ªùi khuy√™n th·ª±c t·∫ø v√† h·ªØu √≠ch
                    
                    **NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:**
                    - Tr·∫£ l·ªùi chi ti·∫øt, c·ª• th·ªÉ v√† d·ªÖ hi·ªÉu
                    - S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, chuy√™n nghi·ªáp
                    - Cung c·∫•p v√≠ d·ª• th·ª±c t·∫ø khi c·∫ßn thi·∫øt
                    - H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc c·ª• th·ªÉ
                    - Khuy·∫øn kh√≠ch v√† ƒë·ªông vi√™n sinh vi√™n
                    
                    **C√ÇU H·ªéI C·ª¶A SINH VI√äN:** %s
                    
                    **Y√äU C·∫¶U:**
                    - Tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß v√† chi ti·∫øt c√¢u h·ªèi tr√™n
                    - N·∫øu li√™n quan ƒë·∫øn ƒë·ªÅ t√†i, gi·∫£ng vi√™n, ho·∫∑c quy tr√¨nh ƒëƒÉng k√Ω, h√£y h∆∞·ªõng d·∫´n sinh vi√™n s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng c·ª• th·ªÉ
                    - Cung c·∫•p th√¥ng tin b·ªï sung h·ªØu √≠ch
                    - K·∫øt th√∫c b·∫±ng l·ªùi khuy√™n ho·∫∑c g·ª£i √Ω ti·∫øp theo
                    """, request.getMessage());

            UserMessage userMsg = UserMessage.from(prompt);
            AiMessage response = model.chat(userMsg).aiMessage();
            String responseText = response.text();
            
            return ChatResponse.builder()
                    .message(responseText)
                    .sessionId(request.getSessionId())
                    .responseType("general")
                    .build();
        } catch (Exception e) {
            log.error("Error handling general query: {}", e.getMessage(), e);
            return ChatResponse.builder()
                    .message("Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c h·ªèi c√¢u h·ªèi kh√°c.")
                    .sessionId(request.getSessionId())
                    .responseType("error")
                    .build();
        }
    }
}
